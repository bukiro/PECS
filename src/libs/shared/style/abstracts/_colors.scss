@mixin text-color-default {
    color: $color-text-dark;

    // Darkmode color for locally styled elements.
    :host-context(.darkmode) & {
        color: $color-text-light;
    }

    // Darkmode color for globally styled elements.
    .darkmode & {
        color: $color-text-light;
    }

    // Only needed for body, which has the darkmode class.
    &.darkmode {
        color: $color-text-light;
    }
}

@mixin border-color-default {
    border-color: $color-text-dark;

    :host-context(.darkmode) & {
        border-color: $color-text-light;
    }

    .darkmode & {
        border-color: $color-text-light;
    }
}

@mixin background-color-default {
    background-color: $color-background-light;

    :host-context(.darkmode) & {
        background-color: $color-background-dark;
    }

    .darkmode & {
        background-color: $color-background-dark;
    }
}

// Used to override other mixins in this file.
@mixin text-color-accent {
    color: $color-accent;

    :host-context(.darkmode) & {
        color: $color-accent;
    }

    .darkmode & {
        color: $color-accent;
    }
}

@mixin border-color-accent {
    border-color: $color-accent;

    :host-context(.darkmode) & {
        border-color: $color-accent;
    }

    .darkmode & {
        border-color: $color-accent;
    }
}

@mixin background-color-accent {
    background-color: $color-accent;

    :host-context(.darkmode) & {
        background-color: $color-accent;
    }

    .darkmode & {
        background-color: $color-accent;
    }
}

@mixin text-color-inverted {
    color: $color-text-light;

    :host-context(.darkmode) & {
        color: $color-text-dark;
    }

    .darkmode & {
        color: $color-text-dark;
    }
}

@mixin border-color-inverted {
    border-color: $color-text-light;

    :host-context(.darkmode) & {
        border-color: $color-text-dark;
    }

    .darkmode & {
        border-color: $color-text-dark;
    }
}

@mixin background-color-inverted {
    background-color: $color-background-dark;

    :host-context(.darkmode) & {
        background-color: $color-background-light;
    }

    .darkmode & {
        background-color: $color-background-light;
    }
}

@mixin text-color-penalty {
    color: $color-penalty-dark;

    :host-context(.darkmode) & {
        color: $color-penalty-light;
    }

    .darkmode & {
        color: $color-penalty-light;
    }
}

@mixin text-color-bonus {
    color: $color-bonus-dark;

    :host-context(.darkmode) & {
        color: $color-bonus-light;
    }

    .darkmode & {
        color: $color-bonus-light;
    }
}

@mixin text-color-absolute {
    color: $color-absolute-dark;

    :host-context(.darkmode) & {
        color: $color-absolute-light;
    }

    .darkmode & {
        color: $color-absolute-light;
    }
}

@mixin background-color-penalty {
    background-color: $color-penalty-light;

    :host-context(.darkmode) & {
        background-color: $color-penalty-dark;
    }

    .darkmode & {
        background-color: $color-penalty-dark;
    }
}

@mixin background-color-bonus {
    background-color: $color-bonus-light;

    :host-context(.darkmode) & {
        background-color: $color-bonus-dark;
    }

    .darkmode & {
        background-color: $color-bonus-dark;
    }
}

@mixin background-color-absolute {
    background-color: $color-absolute-light;

    :host-context(.darkmode) & {
        background-color: $color-absolute-dark;
    }

    .darkmode & {
        background-color: $color-absolute-dark;
    }
}

.text-color-penalty {
    @include text-color-penalty;
}

.text-color-bonus {
    @include text-color-bonus;
}

.text-color-absolute {
    @include text-color-absolute;
}

.background-color-penalty {
    @include background-color-penalty;
}

.background-color-bonus {
    @include background-color-bonus;
}

.background-color-absolute {
    @include background-color-absolute;
}
